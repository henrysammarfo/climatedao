/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ClimateDAO {
  export type UserInfoStruct = {
    registrationTimestamp: BigNumberish;
    totalContributions: BigNumberish;
    proposalCount: BigNumberish;
    voteCount: BigNumberish;
    isActive: boolean;
  };

  export type UserInfoStructOutput = [
    registrationTimestamp: bigint,
    totalContributions: bigint,
    proposalCount: bigint,
    voteCount: bigint,
    isActive: boolean
  ] & {
    registrationTimestamp: bigint;
    totalContributions: bigint;
    proposalCount: bigint;
    voteCount: bigint;
    isActive: boolean;
  };
}

export declare namespace Proposal {
  export type ProjectDetailsStruct = {
    title: string;
    description: string;
    location: string;
    category: BigNumberish;
    requestedAmount: BigNumberish;
    duration: BigNumberish;
    website: string;
    images: string[];
  };

  export type ProjectDetailsStructOutput = [
    title: string,
    description: string,
    location: string,
    category: bigint,
    requestedAmount: bigint,
    duration: bigint,
    website: string,
    images: string[]
  ] & {
    title: string;
    description: string;
    location: string;
    category: bigint;
    requestedAmount: bigint;
    duration: bigint;
    website: string;
    images: string[];
  };
}

export interface ClimateDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAJORITY_THRESHOLD"
      | "MAX_PLATFORM_FEE"
      | "MAX_PROPOSAL_AMOUNT"
      | "MIN_PROPOSAL_AMOUNT"
      | "QUORUM_THRESHOLD"
      | "VOTING_DURATION"
      | "addModerator"
      | "climateToken"
      | "donateFunds"
      | "executeProposal"
      | "getDAOStats"
      | "getPendingProposal"
      | "getPendingProposalDetails"
      | "getPendingProposalIds"
      | "getPendingProposalsCount"
      | "getProposalDetails"
      | "getUserInfo"
      | "getUserProposals"
      | "isModerator"
      | "isUserRegistered"
      | "owner"
      | "pendingProposalCounter"
      | "pendingProposalIds"
      | "pendingProposals"
      | "platformFee"
      | "proposalCounter"
      | "proposals"
      | "registerUser"
      | "registeredUsers"
      | "removeModerator"
      | "renounceOwnership"
      | "reviewProposal"
      | "submitProposal"
      | "totalFundsDistributed"
      | "totalFundsRaised"
      | "transferOwnership"
      | "updatePlatformFee"
      | "updateProposalImpactMetrics"
      | "updateUserVoteCount"
      | "userContributions"
      | "userProposals"
      | "userRegistry"
      | "validProposal"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsDistributed"
      | "FundsDonated"
      | "ModeratorAdded"
      | "ModeratorRemoved"
      | "OwnershipTransferred"
      | "PlatformFeeUpdated"
      | "ProposalApproved"
      | "ProposalCreated"
      | "ProposalReviewed"
      | "ProposalSubmitted"
      | "UserProfileUpdated"
      | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAJORITY_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROPOSAL_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROPOSAL_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUORUM_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addModerator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "climateToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donateFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDAOStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingProposalDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingProposalIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingProposalsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProposals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModerator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingProposalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingProposalIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModerator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewProposal",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [AddressLike, Proposal.ProjectDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFundsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFundsRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposalImpactMetrics",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserVoteCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userContributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userProposals",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAJORITY_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROPOSAL_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROPOSAL_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUORUM_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "climateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDAOStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingProposalDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingProposalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingProposalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFundsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFundsRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProposalImpactMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace FundsDistributedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    beneficiary: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    beneficiary: string,
    amount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDonatedEvent {
  export type InputTuple = [
    donor: AddressLike,
    amount: BigNumberish,
    totalRaised: BigNumberish
  ];
  export type OutputTuple = [
    donor: string,
    amount: bigint,
    totalRaised: bigint
  ];
  export interface OutputObject {
    donor: string;
    amount: bigint;
    totalRaised: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModeratorAddedEvent {
  export type InputTuple = [moderator: AddressLike];
  export type OutputTuple = [moderator: string];
  export interface OutputObject {
    moderator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModeratorRemovedEvent {
  export type InputTuple = [moderator: AddressLike];
  export type OutputTuple = [moderator: string];
  export interface OutputObject {
    moderator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalApprovedEvent {
  export type InputTuple = [pendingId: BigNumberish, proposalId: BigNumberish];
  export type OutputTuple = [pendingId: bigint, proposalId: bigint];
  export interface OutputObject {
    pendingId: bigint;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    proposalContract: AddressLike,
    title: string,
    requestedAmount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    proposalContract: string,
    title: string,
    requestedAmount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    proposalContract: string;
    title: string;
    requestedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalReviewedEvent {
  export type InputTuple = [
    pendingId: BigNumberish,
    approved: boolean,
    reviewNotes: string
  ];
  export type OutputTuple = [
    pendingId: bigint,
    approved: boolean,
    reviewNotes: string
  ];
  export interface OutputObject {
    pendingId: bigint;
    approved: boolean;
    reviewNotes: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalSubmittedEvent {
  export type InputTuple = [
    pendingId: BigNumberish,
    proposer: AddressLike,
    title: string
  ];
  export type OutputTuple = [
    pendingId: bigint,
    proposer: string,
    title: string
  ];
  export interface OutputObject {
    pendingId: bigint;
    proposer: string;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserProfileUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    totalContributions: BigNumberish,
    proposalCount: BigNumberish,
    voteCount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    totalContributions: bigint,
    proposalCount: bigint,
    voteCount: bigint
  ];
  export interface OutputObject {
    user: string;
    totalContributions: bigint;
    proposalCount: bigint;
    voteCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ClimateDAO extends BaseContract {
  connect(runner?: ContractRunner | null): ClimateDAO;
  waitForDeployment(): Promise<this>;

  interface: ClimateDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAJORITY_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  MAX_PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_PROPOSAL_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MIN_PROPOSAL_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  QUORUM_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VOTING_DURATION: TypedContractMethod<[], [bigint], "view">;

  addModerator: TypedContractMethod<
    [moderator: AddressLike],
    [void],
    "nonpayable"
  >;

  climateToken: TypedContractMethod<[], [string], "view">;

  donateFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDAOStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalProposals: bigint;
        totalRaised: bigint;
        totalDistributed: bigint;
        currentBalance: bigint;
      }
    ],
    "view"
  >;

  getPendingProposal: TypedContractMethod<
    [pendingId: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        proposer: string;
        beneficiary: string;
        title: string;
        requestedAmount: bigint;
        submissionTime: bigint;
        isReviewed: boolean;
        isApproved: boolean;
      }
    ],
    "view"
  >;

  getPendingProposalDetails: TypedContractMethod<
    [pendingId: BigNumberish],
    [
      [string, string, bigint, bigint, string, string] & {
        description: string;
        location: string;
        category: bigint;
        duration: bigint;
        website: string;
        reviewNotes: string;
      }
    ],
    "view"
  >;

  getPendingProposalIds: TypedContractMethod<[], [bigint[]], "view">;

  getPendingProposalsCount: TypedContractMethod<[], [bigint], "view">;

  getProposalDetails: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, string, string, bigint] & {
        proposalAddress: string;
        proposer: string;
        beneficiary: string;
        status: bigint;
      }
    ],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [user: AddressLike],
    [ClimateDAO.UserInfoStructOutput],
    "view"
  >;

  getUserProposals: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  isModerator: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isUserRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingProposalCounter: TypedContractMethod<[], [bigint], "view">;

  pendingProposalIds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  pendingProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        Proposal.ProjectDetailsStructOutput,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        proposer: string;
        beneficiary: string;
        projectDetails: Proposal.ProjectDetailsStructOutput;
        submissionTime: bigint;
        isReviewed: boolean;
        isApproved: boolean;
        reviewNotes: string;
      }
    ],
    "view"
  >;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  proposalCounter: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  registerUser: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  registeredUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  removeModerator: TypedContractMethod<
    [moderator: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reviewProposal: TypedContractMethod<
    [pendingId: BigNumberish, approved: boolean, reviewNotes: string],
    [void],
    "nonpayable"
  >;

  submitProposal: TypedContractMethod<
    [beneficiary: AddressLike, projectDetails: Proposal.ProjectDetailsStruct],
    [bigint],
    "nonpayable"
  >;

  totalFundsDistributed: TypedContractMethod<[], [bigint], "view">;

  totalFundsRaised: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProposalImpactMetrics: TypedContractMethod<
    [
      proposalId: BigNumberish,
      co2Reduction: BigNumberish,
      energyGeneration: BigNumberish,
      jobsCreated: BigNumberish,
      aiScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateUserVoteCount: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  userContributions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userProposals: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userRegistry: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        registrationTimestamp: bigint;
        totalContributions: bigint;
        proposalCount: bigint;
        voteCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  validProposal: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  withdrawFees: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAJORITY_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PROPOSAL_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PROPOSAL_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUORUM_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addModerator"
  ): TypedContractMethod<[moderator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "climateToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "donateFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDAOStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalProposals: bigint;
        totalRaised: bigint;
        totalDistributed: bigint;
        currentBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingProposal"
  ): TypedContractMethod<
    [pendingId: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        proposer: string;
        beneficiary: string;
        title: string;
        requestedAmount: bigint;
        submissionTime: bigint;
        isReviewed: boolean;
        isApproved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingProposalDetails"
  ): TypedContractMethod<
    [pendingId: BigNumberish],
    [
      [string, string, bigint, bigint, string, string] & {
        description: string;
        location: string;
        category: bigint;
        duration: bigint;
        website: string;
        reviewNotes: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingProposalIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPendingProposalsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposalDetails"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, string, string, bigint] & {
        proposalAddress: string;
        proposer: string;
        beneficiary: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [ClimateDAO.UserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserProposals"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isModerator"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingProposalCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingProposalIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        Proposal.ProjectDetailsStructOutput,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        proposer: string;
        beneficiary: string;
        projectDetails: Proposal.ProjectDetailsStructOutput;
        submissionTime: bigint;
        isReviewed: boolean;
        isApproved: boolean;
        reviewNotes: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeModerator"
  ): TypedContractMethod<[moderator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewProposal"
  ): TypedContractMethod<
    [pendingId: BigNumberish, approved: boolean, reviewNotes: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitProposal"
  ): TypedContractMethod<
    [beneficiary: AddressLike, projectDetails: Proposal.ProjectDetailsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalFundsDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFundsRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProposalImpactMetrics"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      co2Reduction: BigNumberish,
      energyGeneration: BigNumberish,
      jobsCreated: BigNumberish,
      aiScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUserVoteCount"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userContributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userProposals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userRegistry"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        registrationTimestamp: bigint;
        totalContributions: bigint;
        proposalCount: bigint;
        voteCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "validProposal"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FundsDistributed"
  ): TypedContractEvent<
    FundsDistributedEvent.InputTuple,
    FundsDistributedEvent.OutputTuple,
    FundsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDonated"
  ): TypedContractEvent<
    FundsDonatedEvent.InputTuple,
    FundsDonatedEvent.OutputTuple,
    FundsDonatedEvent.OutputObject
  >;
  getEvent(
    key: "ModeratorAdded"
  ): TypedContractEvent<
    ModeratorAddedEvent.InputTuple,
    ModeratorAddedEvent.OutputTuple,
    ModeratorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ModeratorRemoved"
  ): TypedContractEvent<
    ModeratorRemovedEvent.InputTuple,
    ModeratorRemovedEvent.OutputTuple,
    ModeratorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalApproved"
  ): TypedContractEvent<
    ProposalApprovedEvent.InputTuple,
    ProposalApprovedEvent.OutputTuple,
    ProposalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalReviewed"
  ): TypedContractEvent<
    ProposalReviewedEvent.InputTuple,
    ProposalReviewedEvent.OutputTuple,
    ProposalReviewedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalSubmitted"
  ): TypedContractEvent<
    ProposalSubmittedEvent.InputTuple,
    ProposalSubmittedEvent.OutputTuple,
    ProposalSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "UserProfileUpdated"
  ): TypedContractEvent<
    UserProfileUpdatedEvent.InputTuple,
    UserProfileUpdatedEvent.OutputTuple,
    UserProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "FundsDistributed(uint256,address,uint256)": TypedContractEvent<
      FundsDistributedEvent.InputTuple,
      FundsDistributedEvent.OutputTuple,
      FundsDistributedEvent.OutputObject
    >;
    FundsDistributed: TypedContractEvent<
      FundsDistributedEvent.InputTuple,
      FundsDistributedEvent.OutputTuple,
      FundsDistributedEvent.OutputObject
    >;

    "FundsDonated(address,uint256,uint256)": TypedContractEvent<
      FundsDonatedEvent.InputTuple,
      FundsDonatedEvent.OutputTuple,
      FundsDonatedEvent.OutputObject
    >;
    FundsDonated: TypedContractEvent<
      FundsDonatedEvent.InputTuple,
      FundsDonatedEvent.OutputTuple,
      FundsDonatedEvent.OutputObject
    >;

    "ModeratorAdded(address)": TypedContractEvent<
      ModeratorAddedEvent.InputTuple,
      ModeratorAddedEvent.OutputTuple,
      ModeratorAddedEvent.OutputObject
    >;
    ModeratorAdded: TypedContractEvent<
      ModeratorAddedEvent.InputTuple,
      ModeratorAddedEvent.OutputTuple,
      ModeratorAddedEvent.OutputObject
    >;

    "ModeratorRemoved(address)": TypedContractEvent<
      ModeratorRemovedEvent.InputTuple,
      ModeratorRemovedEvent.OutputTuple,
      ModeratorRemovedEvent.OutputObject
    >;
    ModeratorRemoved: TypedContractEvent<
      ModeratorRemovedEvent.InputTuple,
      ModeratorRemovedEvent.OutputTuple,
      ModeratorRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256,uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "ProposalApproved(uint256,uint256)": TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;
    ProposalApproved: TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,address,string,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalReviewed(uint256,bool,string)": TypedContractEvent<
      ProposalReviewedEvent.InputTuple,
      ProposalReviewedEvent.OutputTuple,
      ProposalReviewedEvent.OutputObject
    >;
    ProposalReviewed: TypedContractEvent<
      ProposalReviewedEvent.InputTuple,
      ProposalReviewedEvent.OutputTuple,
      ProposalReviewedEvent.OutputObject
    >;

    "ProposalSubmitted(uint256,address,string)": TypedContractEvent<
      ProposalSubmittedEvent.InputTuple,
      ProposalSubmittedEvent.OutputTuple,
      ProposalSubmittedEvent.OutputObject
    >;
    ProposalSubmitted: TypedContractEvent<
      ProposalSubmittedEvent.InputTuple,
      ProposalSubmittedEvent.OutputTuple,
      ProposalSubmittedEvent.OutputObject
    >;

    "UserProfileUpdated(address,uint256,uint256,uint256)": TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;
    UserProfileUpdated: TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;

    "UserRegistered(address,uint256)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
