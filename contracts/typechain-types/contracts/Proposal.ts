/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Proposal {
  export type ProjectDetailsStruct = {
    title: string;
    description: string;
    location: string;
    category: BigNumberish;
    requestedAmount: BigNumberish;
    duration: BigNumberish;
    website: string;
    images: string[];
  };

  export type ProjectDetailsStructOutput = [
    title: string,
    description: string,
    location: string,
    category: bigint,
    requestedAmount: bigint,
    duration: bigint,
    website: string,
    images: string[]
  ] & {
    title: string;
    description: string;
    location: string;
    category: bigint;
    requestedAmount: bigint;
    duration: bigint;
    website: string;
    images: string[];
  };
}

export interface ProposalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "beneficiary"
      | "cancelProposal"
      | "castVote"
      | "executeProposal"
      | "getUserVote"
      | "getVotingResults"
      | "hasPassed"
      | "impactMetrics"
      | "majorityThreshold"
      | "markAsExecuted"
      | "owner"
      | "projectDetails"
      | "proposalId"
      | "proposer"
      | "quorumRequired"
      | "renounceOwnership"
      | "status"
      | "transferOwnership"
      | "updateImpactMetrics"
      | "votingData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ImpactMetricsUpdated"
      | "OwnershipTransferred"
      | "ProposalCreated"
      | "ProposalStatusChanged"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVote",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingResults",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasPassed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "impactMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "majorityThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markAsExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateImpactMetrics",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingData",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPassed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "impactMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "majorityThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposalId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImpactMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votingData", data: BytesLike): Result;
}

export namespace ImpactMetricsUpdatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    co2Reduction: BigNumberish,
    energyGeneration: BigNumberish,
    jobsCreated: BigNumberish,
    aiScore: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    co2Reduction: bigint,
    energyGeneration: bigint,
    jobsCreated: bigint,
    aiScore: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    co2Reduction: bigint;
    energyGeneration: bigint;
    jobsCreated: bigint;
    aiScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    title: string,
    requestedAmount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    title: string,
    requestedAmount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    title: string;
    requestedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStatusChangedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    choice: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    choice: bigint,
    weight: bigint
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    choice: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Proposal extends BaseContract {
  connect(runner?: ContractRunner | null): Proposal;
  waitForDeployment(): Promise<this>;

  interface: ProposalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  beneficiary: TypedContractMethod<[], [string], "view">;

  cancelProposal: TypedContractMethod<[], [void], "nonpayable">;

  castVote: TypedContractMethod<
    [choice: BigNumberish, weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<[], [void], "nonpayable">;

  getUserVote: TypedContractMethod<
    [voter: AddressLike],
    [[boolean, bigint] & { hasVoted: boolean; choice: bigint }],
    "view"
  >;

  getVotingResults: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  hasPassed: TypedContractMethod<[], [boolean], "view">;

  impactMetrics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        expectedCO2Reduction: bigint;
        expectedEnergyGeneration: bigint;
        expectedJobsCreated: bigint;
        aiImpactScore: bigint;
        aiAnalysisComplete: boolean;
      }
    ],
    "view"
  >;

  majorityThreshold: TypedContractMethod<[], [bigint], "view">;

  markAsExecuted: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  projectDetails: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        title: string;
        description: string;
        location: string;
        category: bigint;
        requestedAmount: bigint;
        duration: bigint;
        website: string;
      }
    ],
    "view"
  >;

  proposalId: TypedContractMethod<[], [bigint], "view">;

  proposer: TypedContractMethod<[], [string], "view">;

  quorumRequired: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  status: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateImpactMetrics: TypedContractMethod<
    [
      co2Reduction: BigNumberish,
      energyGeneration: BigNumberish,
      jobsCreated: BigNumberish,
      aiScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  votingData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        totalVotes: bigint;
        startTime: bigint;
        endTime: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "beneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [choice: BigNumberish, weight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserVote"
  ): TypedContractMethod<
    [voter: AddressLike],
    [[boolean, bigint] & { hasVoted: boolean; choice: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingResults"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        totalVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPassed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "impactMetrics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        expectedCO2Reduction: bigint;
        expectedEnergyGeneration: bigint;
        expectedJobsCreated: bigint;
        aiImpactScore: bigint;
        aiAnalysisComplete: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "majorityThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "markAsExecuted"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectDetails"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        title: string;
        description: string;
        location: string;
        category: bigint;
        requestedAmount: bigint;
        duration: bigint;
        website: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quorumRequired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateImpactMetrics"
  ): TypedContractMethod<
    [
      co2Reduction: BigNumberish,
      energyGeneration: BigNumberish,
      jobsCreated: BigNumberish,
      aiScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        totalVotes: bigint;
        startTime: bigint;
        endTime: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ImpactMetricsUpdated"
  ): TypedContractEvent<
    ImpactMetricsUpdatedEvent.InputTuple,
    ImpactMetricsUpdatedEvent.OutputTuple,
    ImpactMetricsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStatusChanged"
  ): TypedContractEvent<
    ProposalStatusChangedEvent.InputTuple,
    ProposalStatusChangedEvent.OutputTuple,
    ProposalStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ImpactMetricsUpdated(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ImpactMetricsUpdatedEvent.InputTuple,
      ImpactMetricsUpdatedEvent.OutputTuple,
      ImpactMetricsUpdatedEvent.OutputObject
    >;
    ImpactMetricsUpdated: TypedContractEvent<
      ImpactMetricsUpdatedEvent.InputTuple,
      ImpactMetricsUpdatedEvent.OutputTuple,
      ImpactMetricsUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalStatusChanged(uint256,uint8,uint8)": TypedContractEvent<
      ProposalStatusChangedEvent.InputTuple,
      ProposalStatusChangedEvent.OutputTuple,
      ProposalStatusChangedEvent.OutputObject
    >;
    ProposalStatusChanged: TypedContractEvent<
      ProposalStatusChangedEvent.InputTuple,
      ProposalStatusChangedEvent.OutputTuple,
      ProposalStatusChangedEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint8,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
